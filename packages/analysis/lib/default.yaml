# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
# https://github.com/flutter/packages/blob/master/packages/flutter_lints/lib/flutter.yaml
# https://github.com/dart-lang/lints/blob/main/lib/recommended.yaml
include: package:flutter_lints/flutter.yaml

analyzer:
  # Adjust error analyzer
  errors:
    # Treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # Treat missing returns as a warning (not a hint)
    missing_return: warning
    # Treat relative lib imports as an error.
    avoid_relative_lib_imports: error
    # Treat a void return type for async functions as an error.
    avoid_void_async: error
    # Treat a print as an error.
    avoid_print: error
    # allow having TODOs in the code
    todo: ignore

linter:
  # https://dart-lang.github.io/linter/lints/options/options.html
  rules:
    # Annotating types for function expression parameters is usually unnecessary because the parameter types can almost always be inferred from the context, thus making the practice redundant.
    - avoid_types_on_closure_parameters